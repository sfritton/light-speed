{"mappings":"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","sources":["src/scripts/index.ts","src/scripts/LightSpeed.ts","src/scripts/Star.ts","src/scripts/constants.ts"],"sourcesContent":["import { LightSpeed } from './LightSpeed';\n\nconst canvas = document.querySelector<HTMLCanvasElement>('canvas');\n\nconst setCanvasSize = () => {\n  if (canvas) {\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n  }\n};\n\nsetCanvasSize();\n\nconst lightSpeed = new LightSpeed(canvas);\n\nlightSpeed.init();\n\n// Keep canvas size in sync with window size\nwindow.addEventListener('resize', setCanvasSize);\n","import { Star } from './Star';\nimport {\n  STAR_COUNT,\n  SPEED,\n  MIN_SPEED,\n  COLORS,\n  MIN_OPACITY,\n  STAR_SIZE,\n  STAR_SIZE_PX,\n  STARS_PER_PX,\n  MIN_STARS,\n} from './constants';\n\nfunction easeInOutQuad(x: number): number {\n  return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;\n}\n\nexport class LightSpeed {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  stars: Star[] = [];\n  prevMS = 0;\n  elapsedT = 0;\n  gradients: CanvasGradient[];\n  frames = 0;\n  isDebugMode = false;\n  boundUpdate: (currMS: number) => void;\n  starCount: number;\n\n  constructor(canvas: HTMLCanvasElement | null) {\n    if (!canvas) throw new Error('Canvas cannot be null');\n\n    this.canvas = canvas;\n    const context = canvas.getContext('2d');\n\n    if (!context) throw new Error('Canvas context cannot be null or undefined');\n\n    this.context = context;\n    this.starCount = Math.max(\n      Math.floor(this.canvas.width * this.canvas.height * STARS_PER_PX),\n      MIN_STARS,\n    );\n\n    const radius = Math.sqrt(canvas.width * canvas.width + canvas.height * canvas.height);\n    this.gradients = COLORS.map((color) => {\n      const gradient = context.createRadialGradient(\n        canvas.width / 2,\n        canvas.height / 2,\n        0,\n        canvas.width / 2,\n        canvas.height / 2,\n        radius,\n      );\n      gradient.addColorStop(0.01, `rgba(${color}, ${MIN_OPACITY})`);\n      gradient.addColorStop(0.4, `rgba(${color}, 1)`);\n\n      return gradient;\n    });\n\n    this.isDebugMode = location.search.includes('debug');\n  }\n\n  init() {\n    this.stars = Array.from({ length: this.starCount }).map(() => new Star(this.gradients));\n\n    // Bind the update method once instead of on every frame\n    this.boundUpdate = this.update.bind(this);\n\n    requestAnimationFrame(this.boundUpdate);\n  }\n\n  get speed() {\n    let relativeT = this.elapsedT;\n\n    // Wait 500ms before starting the animation\n    if (relativeT < 0.5) return MIN_SPEED;\n\n    relativeT -= 0.5;\n\n    // 3s of acceleration\n    if (relativeT < 3) return MIN_SPEED + easeInOutQuad(relativeT / 3);\n\n    relativeT -= 3;\n\n    // 2s of top speed\n    if (relativeT < 3) return 1 + MIN_SPEED;\n\n    relativeT -= 3;\n\n    // 3s of deceleration\n    if (relativeT < 3) return 1 + MIN_SPEED - easeInOutQuad(relativeT / 3);\n\n    // Stop\n    return MIN_SPEED;\n  }\n\n  get fps() {\n    if (this.elapsedT <= 0) return 0;\n\n    return Math.round(this.frames / this.elapsedT);\n  }\n\n  update(currMS: number) {\n    if (this.prevMS === 0) {\n      this.prevMS = currMS;\n    }\n\n    const deltaT = currMS - this.prevMS;\n    this.prevMS = currMS;\n\n    // Time in seconds\n    this.elapsedT += deltaT / 1000;\n    this.frames++;\n\n    for (let i = 0; i < this.stars.length; i++) {\n      this.stars[i].move(deltaT, SPEED * this.speed);\n    }\n\n    this.draw();\n\n    requestAnimationFrame(this.boundUpdate);\n  }\n\n  draw() {\n    const centerX = this.canvas.width / 2;\n    const centerY = this.canvas.height / 2;\n\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.context.globalCompositeOperation = 'color-dodge';\n    this.context.lineCap = 'round';\n    this.context.lineWidth = STAR_SIZE_PX;\n\n    for (let i = 0; i < this.gradients.length; i++) {\n      this.context.beginPath();\n      this.context.strokeStyle = this.gradients[i];\n\n      for (let j = i; j < this.stars.length; j += this.gradients.length) {\n        this.stars[j].draw(this.context, this.speed, centerX, centerY);\n      }\n      this.context.stroke();\n    }\n\n    if (!this.isDebugMode) return;\n\n    this.context.globalCompositeOperation = 'source-over';\n    this.context.fillStyle = '#000d';\n    this.context.beginPath();\n    this.context.rect(0, 0, 300, 70);\n    this.context.fill();\n\n    this.context.font = '20px monospace';\n    this.context.fillStyle = '#fff';\n    this.context.fillText(`${this.starCount} stars at ${this.fps} fps`, 20, 40);\n  }\n}\n","import {\n  MIN_SPEED,\n  STAR_LENGTH_MIN,\n  STAR_LENGTH_MAX,\n  STAR_SIZE,\n  MAX_STAR_RESPAWN_DELAY,\n} from './constants';\n\nconst randomRange = (min: number, max: number) => Math.random() * (max - min) + min;\nconst randomItem = (arr: any[]) => arr[Math.floor(Math.random() * arr.length)];\nconst normalize = (x: number, y: number) => {\n  const distanceToOrigin = Math.sqrt(x * x + y * y);\n\n  return {\n    x: x / distanceToOrigin,\n    y: y / distanceToOrigin,\n  };\n};\n\nexport class Star {\n  x: number;\n  y: number;\n  directionX: number;\n  directionY: number;\n  length: number;\n  color: CanvasGradient;\n  isRespawning = false;\n\n  constructor(gradients: CanvasGradient[]) {\n    this.color = randomItem(gradients);\n    this.init();\n  }\n\n  init({ startAtOrigin = false } = {}) {\n    const randomRadius = Math.random() * Math.sqrt(2);\n    const randomAngle = Math.random() * Math.PI * 2;\n    const randomX = randomRadius * Math.cos(randomAngle);\n    const randomY = randomRadius * Math.sin(randomAngle);\n\n    const { x: normX, y: normY } = normalize(randomX, randomY);\n\n    this.directionX = normX;\n    this.directionY = normY;\n\n    // Position from -1 to 1\n    if (startAtOrigin) {\n      this.x = 0;\n      this.y = 0;\n    } else {\n      this.x = randomX;\n      this.y = randomY;\n    }\n\n    // Try again if we started out of bounds\n    if (this.isOutOfBounds) return this.init({ startAtOrigin });\n\n    this.length = randomRange(STAR_LENGTH_MIN, STAR_LENGTH_MAX);\n  }\n\n  get isOutOfBounds() {\n    return this.x > 1.1 || this.x < -1.1 || this.y > 1.1 || this.y < -1.1;\n  }\n\n  get distanceToOrigin() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  move(deltaT: number, speed: number) {\n    // Skip if respawning\n    if (this.isRespawning) return;\n\n    // Calcuate once, then use it for both x and y\n    const magnitude = deltaT * speed * Math.pow(this.distanceToOrigin + 1, 3);\n\n    this.x += this.directionX * magnitude;\n    this.y += this.directionY * magnitude;\n\n    if (this.isOutOfBounds) {\n      this.isRespawning = true;\n\n      const delay = Math.floor(Math.random() * MAX_STAR_RESPAWN_DELAY * speed);\n\n      // Respawn at origin after a random delay\n      setTimeout(() => {\n        this.isRespawning = false;\n        this.init({ startAtOrigin: true });\n      }, delay);\n    }\n  }\n\n  draw(context: CanvasRenderingContext2D, speed: number, centerX: number, centerY: number) {\n    // Don't draw if off-screen\n    if (this.isOutOfBounds) return;\n\n    // Calculate once, then use for both x and y\n    const currentLength =\n      Math.min((this.length + this.distanceToOrigin) / this.distanceToOrigin, 1) *\n      (speed - MIN_SPEED);\n\n    const x2 = this.x + this.x * currentLength;\n    const y2 = this.y + this.y * currentLength;\n\n    const renderX = this.x * centerX + centerX;\n    const renderY = this.y * centerY + centerY;\n\n    const renderX2 = x2 * centerX + centerX;\n    const renderY2 = y2 * centerY + centerY;\n\n    context.moveTo(renderX, renderY);\n    context.lineTo(renderX2, renderY2);\n  }\n}\n","export const COLORS = ['255,255,255', '204,204,255', '170,170,255', '221,221,255'];\nexport const MIN_OPACITY = 0;\nexport const MIN_SPEED = 0.01;\nexport const SPEED = 0.0005;\nexport const STAR_COUNT = 100000; // Math.max(100, Math.min(window.innerWidth - 300, 500));\nexport const STAR_LENGTH_MAX = 60;\nexport const STAR_LENGTH_MIN = 10;\nexport const STAR_SIZE = 0.04;\nexport const STAR_SIZE_PX = 4;\nexport const STARS_PER_PX = 0.001;\nexport const MIN_STARS = 1000;\nexport const MAX_STAR_RESPAWN_DELAY = 1000 / SPEED; // ms\n"],"names":[],"version":3,"file":"index.93a38034.js.map"}