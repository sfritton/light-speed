{"mappings":"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","sources":["src/scripts/index.ts","src/scripts/LightSpeed.ts","src/scripts/Star.ts"],"sourcesContent":["import { LightSpeed } from './LightSpeed';\n\n// DOM elements\nconst canvas = document.querySelector<HTMLCanvasElement>('canvas');\n\nconst lightSpeed = new LightSpeed(canvas);\n\nlightSpeed.init();\n","import { Star } from './Star';\n\nconst STAR_COUNT = 500;\nconst SPEED = 0.0008;\nconst ACCELERATION = 0.4;\n\nexport class LightSpeed {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  stars: Star[] = [];\n  prevMS = 0;\n  speed = 0;\n  elapsedT = 0;\n\n  constructor(canvas: HTMLCanvasElement | null) {\n    if (!canvas) throw new Error('Canvas cannot be null');\n\n    this.canvas = canvas;\n    const context = canvas.getContext('2d');\n\n    if (!context) throw new Error('Canvas context cannot be null or undefined');\n\n    this.context = context;\n  }\n\n  init() {\n    this.stars = Array.from({ length: STAR_COUNT }).map(() => new Star());\n\n    requestAnimationFrame(this.update.bind(this));\n  }\n\n  update(currMS: number) {\n    if (this.prevMS === 0) {\n      this.prevMS = currMS;\n    }\n\n    const deltaT = currMS - this.prevMS;\n    this.prevMS = currMS;\n\n    // Time in seconds\n    this.elapsedT += deltaT / 1000;\n    this.speed = -Math.cos(this.elapsedT * ACCELERATION) + 1;\n\n    this.stars.forEach((star) => star.move(deltaT, SPEED * this.speed));\n\n    this.draw();\n\n    if (this.elapsedT > 5 && this.speed <= 0.001) return;\n    requestAnimationFrame(this.update.bind(this));\n  }\n\n  draw() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.stars.forEach((star) => star.draw(this.context, this.canvas, this.speed));\n  }\n}\n","const STAR_LENGTH_MIN = 1;\nconst STAR_LENGTH_MAX = 20;\nconst STAR_SIZE = 1;\nconst COLORS = ['#fff', '#ccf', '#aaf', '#ddf'];\n\nconst randomRange = (min: number, max: number) => Math.random() * (max - min) + min;\nconst randomItem = (arr: any[]) => arr[Math.floor(Math.random() * arr.length)];\nconst normalize = (x: number, y: number) => {\n  const distanceToOrigin = Math.sqrt(x * x + y * y);\n\n  return {\n    x: x / distanceToOrigin,\n    y: y / distanceToOrigin,\n  };\n};\n\nexport class Star {\n  x: number;\n  y: number;\n  directionX: number;\n  directionY: number;\n  length: number;\n  color: string;\n\n  constructor() {\n    this.init();\n  }\n\n  init({ startAtOrigin = false } = {}) {\n    const randomX = Math.random() * 2 - 1;\n    const randomY = Math.random() * 2 - 1;\n\n    const { x: normX, y: normY } = normalize(randomX, randomY);\n\n    this.directionX = normX;\n    this.directionY = normY;\n\n    // Position from -1 to 1\n    if (startAtOrigin) {\n      this.x = 0;\n      this.y = 0;\n    } else {\n      this.x = randomX;\n      this.y = randomY;\n    }\n\n    this.length = randomRange(STAR_LENGTH_MIN, STAR_LENGTH_MAX);\n    this.color = randomItem(COLORS);\n  }\n\n  move(deltaT: number, speed: number) {\n    this.x += this.directionX * deltaT * speed;\n    this.y += this.directionY * deltaT * speed;\n  }\n\n  draw(context: CanvasRenderingContext2D, canvas: HTMLCanvasElement, speed: number) {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    const renderX = this.x * centerX + centerX;\n    const renderY = this.y * centerY + centerY;\n\n    const distanceToOrigin = Math.sqrt(this.x * this.x + this.y * this.y);\n\n    const x2 =\n      this.x + this.x * Math.min((this.length + distanceToOrigin) / distanceToOrigin, 1) * speed;\n    const y2 =\n      this.y + this.y * Math.min((this.length + distanceToOrigin) / distanceToOrigin, 1) * speed;\n\n    if (this.x > 1 || this.x < -1 || this.y > 1 || this.y < -1) {\n      this.init({ startAtOrigin: true });\n      return;\n    }\n\n    const renderX2 = x2 * centerX + centerX;\n    const renderY2 = y2 * centerY + centerY;\n\n    context.beginPath();\n    context.moveTo(renderX, renderY);\n    context.lineTo(renderX2, renderY2);\n    context.strokeStyle = this.color;\n    context.lineWidth = this.length * STAR_SIZE * distanceToOrigin;\n    context.lineCap = 'round';\n    context.stroke();\n  }\n}\n"],"names":[],"version":3,"file":"index.ecb02894.js.map"}