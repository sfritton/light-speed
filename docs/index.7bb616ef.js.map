{"mappings":"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","sources":["src/scripts/index.ts","src/scripts/LightSpeed.ts","src/scripts/Star.ts","src/scripts/constants.ts"],"sourcesContent":["import { LightSpeed } from './LightSpeed';\n\nconst canvas = document.querySelector<HTMLCanvasElement>('canvas');\n\nconst lightSpeed = new LightSpeed(canvas);\n\nlightSpeed.init();\n","import { Star } from './Star';\nimport { SPEED, MIN_SPEED, COLORS, STAR_SIZE_PX, STARS_PER_PX, MIN_STARS } from './constants';\n\nfunction easeInOutQuad(x: number): number {\n  return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;\n}\n\nexport class LightSpeed {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  stars: Star[] = [];\n  prevMS = 0;\n  elapsedT = 0;\n  gradients: CanvasGradient[];\n  frames = 0;\n  isDebugMode = false;\n  boundUpdate: (currMS: number) => void;\n  starCount: number;\n  centerX: number;\n  centerY: number;\n\n  constructor(canvas: HTMLCanvasElement | null) {\n    if (!canvas) throw new Error('Canvas cannot be null');\n\n    this.canvas = canvas;\n    const context = canvas.getContext('2d');\n\n    if (!context) throw new Error('Canvas context cannot be null or undefined');\n\n    this.context = context;\n\n    // Initialize canvas size\n    this.onInitOrResize();\n\n    // Keep canvas size in sync with window size\n    window.addEventListener('resize', this.onInitOrResize.bind(this));\n\n    // Initial star count is based on canvas size,\n    // but this won't change on resize to avoid stars jumping around\n    this.starCount = Math.max(\n      Math.floor(this.canvas.width * this.canvas.height * STARS_PER_PX),\n      MIN_STARS,\n    );\n\n    this.isDebugMode = location.search.includes('debug');\n  }\n\n  init() {\n    this.stars = Array.from({ length: this.starCount }).map(() => new Star());\n\n    // Bind the update method once instead of on every frame\n    this.boundUpdate = this.update.bind(this);\n\n    requestAnimationFrame(this.boundUpdate);\n  }\n\n  onInitOrResize() {\n    const width = this.canvas.clientWidth;\n    const height = this.canvas.clientHeight;\n\n    this.centerX = width / 2;\n    this.centerY = height / 2;\n    const radius = Math.sqrt(this.centerX * this.centerX + this.centerY * this.centerY);\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    this.gradients = COLORS.map((color) => {\n      const gradient = this.context.createRadialGradient(\n        this.centerX,\n        this.centerY,\n        0,\n        this.centerX,\n        this.centerY,\n        radius,\n      );\n      gradient.addColorStop(0.02, `rgba(${color}, 0)`);\n      gradient.addColorStop(0.45, `rgba(${color}, 1)`);\n\n      return gradient;\n    });\n  }\n\n  get speed() {\n    let relativeT = this.elapsedT;\n\n    // Wait 500ms before starting the animation\n    if (relativeT < 0.5) return MIN_SPEED;\n\n    relativeT -= 0.5;\n\n    // 3s of acceleration\n    if (relativeT < 3) return MIN_SPEED + easeInOutQuad(relativeT / 3);\n\n    relativeT -= 3;\n\n    // 2s of top speed\n    if (relativeT < 3) return 1 + MIN_SPEED;\n\n    relativeT -= 3;\n\n    // 3s of deceleration\n    if (relativeT < 3) return 1 + MIN_SPEED - easeInOutQuad(relativeT / 3);\n\n    // Stop\n    return MIN_SPEED;\n  }\n\n  get fps() {\n    if (this.elapsedT <= 0) return 0;\n\n    return Math.round(this.frames / this.elapsedT);\n  }\n\n  update(currMS: number) {\n    if (this.prevMS === 0) {\n      this.prevMS = currMS;\n    }\n\n    const deltaT = currMS - this.prevMS;\n    this.prevMS = currMS;\n\n    // Time in seconds\n    this.elapsedT = currMS / 1000;\n    this.frames++;\n\n    for (let i = 0; i < this.stars.length; i++) {\n      this.stars[i].move(deltaT, SPEED * this.speed);\n    }\n\n    this.draw();\n\n    requestAnimationFrame(this.boundUpdate);\n  }\n\n  draw() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.context.globalCompositeOperation = 'color-dodge';\n    this.context.lineCap = 'round';\n\n    for (let i = 0; i < this.gradients.length; i++) {\n      this.context.beginPath();\n      this.context.strokeStyle = this.gradients[i];\n      const mobileFactor = this.canvas.width < 668 ? 0.5 : 1;\n      this.context.lineWidth = STAR_SIZE_PX * (i + 1) * mobileFactor;\n\n      for (let j = i; j < this.stars.length; j += this.gradients.length) {\n        this.stars[j].draw(this.context, this.speed, this.centerX, this.centerY);\n      }\n      this.context.stroke();\n    }\n\n    if (!this.isDebugMode) return;\n\n    this.context.globalCompositeOperation = 'source-over';\n    this.context.fillStyle = '#000d';\n    this.context.beginPath();\n    this.context.rect(0, 0, 260, 36);\n    this.context.fill();\n\n    this.context.font = '16px monospace';\n    this.context.fillStyle = '#fff';\n    this.context.fillText(`${this.starCount} stars at ${this.fps} fps`, 16, 24);\n  }\n}\n","import {\n  MIN_SPEED,\n  STAR_LENGTH_MIN,\n  STAR_LENGTH_MAX,\n  ORIGIN_DEPTH,\n  ORIGIN_DEPTH_VARIANCE,\n  PERSPECTIVE,\n} from './constants';\n\nconst randomRange = (min: number, max: number) => Math.random() * (max - min) + min;\n\nexport class Star {\n  angle: number;\n  z: number;\n  length: number;\n\n  constructor() {\n    this.init();\n  }\n\n  init({ startAtOrigin = false } = {}) {\n    this.angle = randomRange(0, Math.PI * 2);\n\n    if (startAtOrigin) {\n      this.z = randomRange(ORIGIN_DEPTH, ORIGIN_DEPTH + ORIGIN_DEPTH_VARIANCE);\n    } else {\n      this.z = randomRange(0, ORIGIN_DEPTH);\n    }\n\n    // Try again if we started out of bounds\n    if (this.isOutOfBounds) return this.init({ startAtOrigin });\n\n    this.length = randomRange(STAR_LENGTH_MIN, STAR_LENGTH_MAX);\n  }\n\n  get x() {\n    return Math.cos(this.angle) / this.z;\n  }\n\n  get y() {\n    return Math.sin(this.angle) / this.z;\n  }\n\n  get isOutOfBounds() {\n    return this.z < 0.01;\n  }\n\n  get distanceToOrigin() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  move(deltaT: number, speed: number) {\n    this.z -= deltaT * speed;\n\n    // If we're out of bounds, restart at the origin\n    if (this.isOutOfBounds) this.init({ startAtOrigin: true });\n  }\n\n  draw(context: CanvasRenderingContext2D, speed: number, centerX: number, centerY: number) {\n    // Don't draw if off-screen\n    if (this.isOutOfBounds) return;\n\n    const currentLength =\n      Math.min((this.length + this.distanceToOrigin) / this.distanceToOrigin, 1) *\n      (speed - MIN_SPEED);\n\n    const z2 = this.z + currentLength;\n\n    const renderX = (this.x / this.z) * PERSPECTIVE + centerX;\n    const renderY = (this.y / this.z) * PERSPECTIVE + centerY;\n\n    const renderX2 = (this.x / z2) * PERSPECTIVE + centerX;\n    const renderY2 = (this.y / z2) * PERSPECTIVE + centerY;\n\n    context.moveTo(renderX, renderY);\n    context.lineTo(renderX2, renderY2);\n  }\n}\n","export const MIN_SPEED = 0.01;\nexport const SPEED = 0.005;\n\nexport const COLORS = ['255,255,255', '204,204,255', '170,170,255', '221,221,255'];\nexport const STAR_LENGTH_MAX = 60;\nexport const STAR_LENGTH_MIN = 10;\nexport const STAR_SIZE_PX = 1;\nexport const STARS_PER_PX = 0.002;\nexport const MIN_STARS = 2000;\n\nexport const ORIGIN_DEPTH = 10;\nexport const ORIGIN_DEPTH_VARIANCE = 2;\nexport const PERSPECTIVE = 1000;\n"],"names":[],"version":3,"file":"index.7bb616ef.js.map"}