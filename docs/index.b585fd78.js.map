{"mappings":"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","sources":["src/scripts/index.ts","src/scripts/LightSpeed.ts","src/scripts/Star.ts","src/scripts/constants.ts"],"sourcesContent":["import { LightSpeed } from './LightSpeed';\n\n// DOM elements\nconst canvas = document.querySelector<HTMLCanvasElement>('canvas');\n\nconst lightSpeed = new LightSpeed(canvas);\n\nlightSpeed.init();\n","import { Star } from './Star';\nimport { STAR_COUNT, SPEED, MIN_SPEED } from './constants';\n\nfunction easeInOutQuad(x: number): number {\n  return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;\n}\n\nexport class LightSpeed {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  stars: Star[] = [];\n  prevMS = 0;\n  elapsedT = 0;\n\n  constructor(canvas: HTMLCanvasElement | null) {\n    if (!canvas) throw new Error('Canvas cannot be null');\n\n    this.canvas = canvas;\n    const context = canvas.getContext('2d');\n\n    if (!context) throw new Error('Canvas context cannot be null or undefined');\n\n    this.context = context;\n  }\n\n  init() {\n    this.stars = Array.from({ length: STAR_COUNT }).map(() => new Star());\n\n    requestAnimationFrame(this.update.bind(this));\n  }\n\n  get speed() {\n    let relativeT = this.elapsedT;\n\n    // Wait 500ms before starting the animation\n    if (relativeT < 0.5) return MIN_SPEED;\n\n    relativeT -= 0.5;\n\n    // 3s of acceleration\n    if (relativeT < 3) return MIN_SPEED + easeInOutQuad(relativeT / 3);\n\n    relativeT -= 3;\n\n    // 2s of top speed\n    if (relativeT < 3) return 1 + MIN_SPEED;\n\n    relativeT -= 3;\n\n    // 3s of deceleration\n    if (relativeT < 3) return 1 + MIN_SPEED - easeInOutQuad(relativeT / 3);\n\n    // Stop\n    return MIN_SPEED;\n  }\n\n  update(currMS: number) {\n    if (this.prevMS === 0) {\n      this.prevMS = currMS;\n    }\n\n    const deltaT = currMS - this.prevMS;\n    this.prevMS = currMS;\n\n    // Time in seconds\n    this.elapsedT += deltaT / 1000;\n\n    this.stars.forEach((star) => star.move(deltaT, SPEED * this.speed));\n\n    this.draw();\n\n    requestAnimationFrame(this.update.bind(this));\n  }\n\n  draw() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.stars.forEach((star) => star.draw(this.context, this.canvas, this.speed));\n  }\n}\n","import { MIN_SPEED } from './constants';\n\nconst MIN_OPACITY = 0.2;\nconst STAR_LENGTH_MIN = 10;\nconst STAR_LENGTH_MAX = 60;\nconst STAR_SIZE = 0.4;\nconst COLORS = ['255,255,255', '204,204,255', '170,170,255', '221,221,255'];\n\nconst lerp = (value: number, min: number, max: number) => min + value * (max - min);\nconst randomRange = (min: number, max: number) => Math.random() * (max - min) + min;\nconst randomItem = (arr: any[]) => arr[Math.floor(Math.random() * arr.length)];\nconst normalize = (x: number, y: number) => {\n  const distanceToOrigin = Math.sqrt(x * x + y * y);\n\n  return {\n    x: x / distanceToOrigin,\n    y: y / distanceToOrigin,\n  };\n};\n\nexport class Star {\n  x: number;\n  y: number;\n  directionX: number;\n  directionY: number;\n  length: number;\n  color: string;\n\n  constructor() {\n    this.init();\n  }\n\n  init({ startAtOrigin = false } = {}) {\n    const randomRadius = Math.random() * Math.sqrt(2);\n    const randomAngle = Math.random() * Math.PI * 2;\n    const randomX = randomRadius * Math.cos(randomAngle);\n    const randomY = randomRadius * Math.sin(randomAngle);\n\n    const { x: normX, y: normY } = normalize(randomX, randomY);\n\n    this.directionX = normX;\n    this.directionY = normY;\n\n    // Position from -1 to 1\n    if (startAtOrigin) {\n      this.x = 0;\n      this.y = 0;\n    } else {\n      this.x = randomX;\n      this.y = randomY;\n    }\n\n    // Try again if we started out of bounds\n    if (this.isOutOfBounds) return this.init({ startAtOrigin });\n\n    this.length = randomRange(STAR_LENGTH_MIN, STAR_LENGTH_MAX);\n    this.color = randomItem(COLORS);\n  }\n\n  get isOutOfBounds() {\n    return this.x > 1.1 || this.x < -1.1 || this.y > 1.1 || this.y < -1.1;\n  }\n\n  get distanceToOrigin() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  move(deltaT: number, speed: number) {\n    this.x += this.directionX * deltaT * speed * Math.pow(this.distanceToOrigin + 1, 2);\n    this.y += this.directionY * deltaT * speed * Math.pow(this.distanceToOrigin + 1, 2);\n  }\n\n  draw(context: CanvasRenderingContext2D, canvas: HTMLCanvasElement, speed: number) {\n    const x2 =\n      this.x +\n      this.x *\n        Math.min((this.length + this.distanceToOrigin) / this.distanceToOrigin, 1) *\n        (speed - MIN_SPEED);\n    const y2 =\n      this.y +\n      this.y *\n        Math.min((this.length + this.distanceToOrigin) / this.distanceToOrigin, 1) *\n        (speed - MIN_SPEED);\n\n    if (this.isOutOfBounds) {\n      this.init({ startAtOrigin: true });\n      return;\n    }\n\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    const renderX = this.x * centerX + centerX;\n    const renderY = this.y * centerY + centerY;\n\n    const renderX2 = x2 * centerX + centerX;\n    const renderY2 = y2 * centerY + centerY;\n\n    const alpha = lerp(this.distanceToOrigin, MIN_OPACITY, 1);\n    const alpha2 = lerp(Math.sqrt(x2 * x2 + y2 * y2), MIN_OPACITY, 1);\n\n    const gradient = context.createLinearGradient(renderX, renderY, renderX2, renderY2);\n    gradient.addColorStop(0, `rgba(${this.color},${alpha})`);\n    gradient.addColorStop(1, `rgba(${this.color},${alpha2})`);\n\n    const isMoving = speed > MIN_SPEED;\n\n    context.beginPath();\n    context.moveTo(renderX, renderY);\n    context.lineTo(renderX2, renderY2);\n    context.strokeStyle = isMoving ? gradient : `rgba(${this.color},${alpha})`;\n    context.lineWidth = this.length * STAR_SIZE * this.distanceToOrigin;\n    context.lineCap = 'round';\n    context.stroke();\n  }\n}\n","export const STAR_COUNT = 500;\nexport const SPEED = 0.0005;\nexport const MIN_SPEED = 0.02;\n"],"names":[],"version":3,"file":"index.b585fd78.js.map"}